---
description: Project inception, research, and design methodology for greenfield projects
globs: docs/PRD.md,docs/TECH_STACK.md,docs/TASKS.md
alwaysApply: false
---

# 5.4 Research & Design Methodology

> Invoke when starting a new project from scratch with brief context.
> AI acts as strategic consultant, asking targeted questions to extract project requirements.
> Documentation (PRD, TECH_STACK, TASKS) is produced only at the final stage.

---

## 0 · Interactive Discovery Process

**User provides:** Brief project description or problem statement
**AI responds with:** 1-3 strategic questions to understand the core problem

### Q&A Format Rules
- **One question at a time** unless asking 2-3 linked questions on the same topic
- **Maximum 3 questions per response** - more becomes impractical to answer
- **Each answer influences the next question** - adaptive questioning based on responses
- **Total limit: 20 questions maximum** for the entire discovery process
- **Create temporary questions_for_you.md only as last resort** when Q&A format becomes unwieldy

### Question Categories (Adaptive Selection)
Based on user responses, select from these categories:
- Problem definition and scope
- Stakeholder and user identification  
- Technical requirements and constraints
- Timeline and resource limitations
- Success criteria and metrics

---

## 1 · Adaptive Questioning Process

**AI follows this pattern:**
1. **Ask 1-3 strategic questions** based on current understanding
2. **Analyze responses** to determine next question category
3. **Adapt questioning** based on answers received
4. **Track question count** (max 20 total)
5. **Move to synthesis** when sufficient information gathered

### Question Selection Strategy
- **Start broad** (problem definition) then narrow down
- **Follow user's expertise level** - don't ask technical questions to non-technical users
- **Prioritize based on project type** - web app vs CLI tool vs API
- **Skip irrelevant categories** based on early responses

---

## 2 · Validation & Synthesis

**AI synthesizes all gathered information:**

**Synthesis Process:**
- AI presents back a structured summary of all gathered information
- User confirms, corrects, or expands on any points
- AI identifies any gaps or inconsistencies that need clarification
- Final validation before moving to documentation phase

**Final Validation Questions (if needed):**
- Based on our discussion, does this summary capture your vision accurately?
- Are there any critical aspects we haven't covered?
- Do the priorities and constraints seem realistic?

---

## 3 · Final Documentation Generation

**Only after complete discovery, AI generates comprehensive documentation:**

### Core Documentation Suite
Create comprehensive documentation in `docs/` folder:

#### PRD.md (Product Requirements Document)
```markdown
# Project Name - PRD

## Problem Statement
[Clear problem definition]

## Goals & Success Metrics
[Measurable outcomes]

## User Personas & Use Cases
[Target users and their needs]

## Functional Requirements
[What the system must do]

## Non-Functional Requirements
[Performance, security, scalability]

## Constraints & Assumptions
[Limitations and dependencies]

## Out of Scope
[What we're explicitly not doing]
```

#### TECH_STACK.md
```markdown
# Technology Stack Decisions

## Architecture Overview
[High-level system design]

## Technology Choices
### Frontend: [Choice] - [Rationale]
### Backend: [Choice] - [Rationale]
### Database: [Choice] - [Rationale]
### Infrastructure: [Choice] - [Rationale]

## Architecture Decision Records
### ADR-001: [Decision Title]
- Status: Accepted/Deprecated
- Context: [Why this decision was needed]
- Decision: [What was decided]
- Consequences: [Trade-offs and implications]
```

#### TASKS.md
```markdown
# Project Tasks

## Phase 1: Foundation
- [ ] 1.1.1: Set up development environment
- [ ] 1.1.2: Initialize project structure
- [ ] 1.1.3: Configure CI/CD pipeline

## Phase 2: Core Features
[Detailed task breakdown]

## Phase 3: Integration & Testing
[Testing and integration tasks]

## Phase 4: Deployment & Launch
[Deployment and launch tasks]
```

---

## 6 · Validation & Iteration

- **Prototype development** — Build minimal viable prototypes to test key assumptions.
- **Stakeholder review cycles** — Regular check-ins with stakeholders for feedback.
- **Technical spike execution** — Investigate high-risk technical areas.
- **Documentation updates** — Keep all docs synchronized with new learnings.
- **Go/no-go decision points** — Define criteria for proceeding to development phase.

---

## 7 · Design Thinking Principles

### Human-Centered Design
- **Empathy mapping** — Understand user needs, pains, and motivations.
- **Journey mapping** — Map user interactions and touchpoints.
- **Accessibility considerations** — Design for diverse user abilities and contexts.

### Iterative Approach
- **Rapid prototyping** — Quick, low-fidelity tests of key concepts.
- **Fail fast principle** — Identify and address issues early when changes are cheap.
- **Feedback loops** — Regular validation with users and stakeholders.

### Systems Thinking
- **Holistic view** — Consider the entire ecosystem, not just the immediate solution.
- **Unintended consequences** — Anticipate how changes might affect other systems.
- **Scalability planning** — Design for future growth and evolution.

---

## 8 · Quality Gates & Deliverables

### Phase Completion Criteria
- [ ] Problem is clearly defined and validated
- [ ] Requirements are documented and prioritized
- [ ] Technology stack decisions are made and documented
- [ ] Project tasks are broken down and estimated
- [ ] Risks are identified with mitigation plans
- [ ] Success metrics are defined and measurable
- [ ] Stakeholder sign-off on scope and approach

### Documentation Quality Checklist
- [ ] All documents follow consistent format and style
- [ ] Cross-references between documents are accurate
- [ ] Decisions include rationale and alternatives considered
- [ ] Requirements are testable and measurable
- [ ] Assumptions are clearly stated and validated
- [ ] Documents are stored in proper `docs/` structure

---

## 9 · Transition to Development

- **Handoff preparation** — Ensure all documentation is complete and accessible.
- **Development environment setup** — Prepare tools, repositories, and CI/CD pipelines.
- **Team alignment** — Brief development team on decisions and rationale.
- **First sprint planning** — Select initial tasks and establish development rhythm.
- **Communication channels** — Set up project communication and status reporting.

> **Next Phase:** Move to active development following task management and development standards.